"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤.
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd

from src.utils.credentials_manager import CredentialsManager
from src.database.supabase_client import SupabaseClient
from src.services.gsc_service import GSCService
from src.services.telegram_service import TelegramService
from src.reports.constants import TOP_LIMITS
from src.reports.visualizer import ReportVisualizer

class WeeklyReport:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ WeeklyReport."""
        self.credentials = CredentialsManager()
        self.db = SupabaseClient()
        self.gsc = GSCService()
        self.telegram = TelegramService()
        self.visualizer = ReportVisualizer()
        
    def get_date_range(self) -> tuple[datetime, datetime, datetime, datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏.
        
        Returns:
            tuple: (–Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏, 
                   –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏)
        """
        end_date = datetime.now() - timedelta(days=3)  # GSC –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—Ç–∞—é—Ç –Ω–∞ 3 –¥–Ω—è
        start_date = end_date - timedelta(days=7)
        prev_end_date = start_date - timedelta(days=1)
        prev_start_date = prev_end_date - timedelta(days=7)
        return start_date, end_date, prev_start_date, prev_end_date
        
    def get_comparison_data(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        """
        start_date, end_date, prev_start, prev_end = self.get_date_range()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase
        result = self.db.client.table('search_queries_daily').select('*').execute()
        data = result.data
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        current_week_data = [
            row for row in data 
            if start_date <= datetime.fromisoformat(row['date']) <= end_date
        ]
        
        previous_week_data = [
            row for row in data 
            if prev_start <= datetime.fromisoformat(row['date']) <= prev_end
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        categories = {}
        cities = {}
        queries = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        for row in current_week_data:
            query = row['query']
            query_type = row['query_type']
            city = row['city']
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
            prev_data = next(
                (r for r in previous_week_data 
                 if r['query'] == query 
                 and r['query_type'] == query_type 
                 and r['city'] == city),
                None
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            query_data = {
                'query': query,
                'current_clicks': row['clicks'],
                'previous_clicks': prev_data['clicks'] if prev_data else 0,
                'current_position': row['position'],
                'previous_position': prev_data['position'] if prev_data else 0,
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            query_data['clicks_change'] = (
                ((query_data['current_clicks'] - query_data['previous_clicks']) / 
                 query_data['previous_clicks'] * 100)
                if query_data['previous_clicks'] > 0 else 
                (100 if query_data['current_clicks'] > 0 else 0)
            )
            
            query_data['position_change'] = (
                query_data['previous_position'] - query_data['current_position']
            )
            
            queries.append(query_data)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if query_type not in categories:
                categories[query_type] = {
                    'current_clicks': 0,
                    'previous_clicks': 0,
                    'current_impressions': 0,
                    'previous_impressions': 0
                }
            cat = categories[query_type]
            cat['current_clicks'] += row['clicks']
            cat['current_impressions'] += row['impressions']
            if prev_data:
                cat['previous_clicks'] += prev_data['clicks']
                cat['previous_impressions'] += prev_data['impressions']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
            if city and city not in cities:
                cities[city] = {
                    'current_clicks': 0,
                    'previous_clicks': 0,
                    'current_impressions': 0,
                    'previous_impressions': 0
                }
            if city:
                city_data = cities[city]
                city_data['current_clicks'] += row['clicks']
                city_data['current_impressions'] += row['impressions']
                if prev_data:
                    city_data['previous_clicks'] += prev_data['clicks']
                    city_data['previous_impressions'] += prev_data['impressions']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–ª–∏–∫–æ–≤
        queries.sort(key=lambda x: abs(x['clicks_change']), reverse=True)
        
        return {
            'queries': queries[:TOP_LIMITS['queries']],
            'categories': categories,
            'cities': cities
        }
        
    def format_comparison_report(self, data: Dict) -> tuple[str, List[bytes]]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            
        Returns:
            tuple[str, List[bytes]]: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        start_date, end_date, prev_start, prev_end = self.get_date_range()
        
        report = [
            f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ SEO",
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n",
            "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π:\n"
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        position_chart = self.visualizer.create_position_changes(
            data['queries'],
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–∞–º"
        )
        images.append(position_chart)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_chart = self.visualizer.create_category_comparison(
            data['categories'],
            'clicks',
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        )
        images.append(category_chart)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        report.append("üìà –†–ê–°–¢–£–©–ò–ï –ó–ê–ü–†–û–°–´:")
        growing_queries = sorted(
            [q for q in data['queries'] if q['clicks_change'] > 0],
            key=lambda x: x['clicks_change'],
            reverse=True
        )[:5]
        
        for q in growing_queries:
            report.extend([
                f"‚Ä¢ {q['query']}",
                f"  –ö–ª–∏–∫–∏: {q['current_clicks']} (+{q['clicks_change']:.1f}%)",
                f"  –ü–æ–∑–∏—Ü–∏—è: {q['current_position']:.1f} ({'+' if q['position_change'] > 0 else ''}{q['position_change']:.1f})"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        report.append("\nüìâ –ü–ê–î–ê–Æ–©–ò–ï –ó–ê–ü–†–û–°–´:")
        declining_queries = sorted(
            [q for q in data['queries'] if q['clicks_change'] < 0],
            key=lambda x: x['clicks_change']
        )[:5]
        
        for q in declining_queries:
            report.extend([
                f"‚Ä¢ {q['query']}",
                f"  –ö–ª–∏–∫–∏: {q['current_clicks']} ({q['clicks_change']:.1f}%)",
                f"  –ü–æ–∑–∏—Ü–∏—è: {q['current_position']:.1f} ({'+' if q['position_change'] > 0 else ''}{q['position_change']:.1f})"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        report.append("\nüìä –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for cat_name, cat_data in data['categories'].items():
            clicks_change = ((cat_data['current_clicks'] - cat_data['previous_clicks']) / 
                           cat_data['previous_clicks'] * 100 if cat_data['previous_clicks'] else 0)
            report.extend([
                f"‚Ä¢ {cat_name}:",
                f"  –ö–ª–∏–∫–∏: {cat_data['current_clicks']} ({'+' if clicks_change > 0 else ''}{clicks_change:.1f}%)"
            ])
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.extend(self._generate_recommendations(data))
        
        return "\n".join(report), images
        
    def _generate_recommendations(self, data: Dict) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        recommendations = ["\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        declining_queries = [
            q for q in data['queries'] 
            if q['clicks_change'] < -20 or q['position_change'] < -3
        ]
        
        if declining_queries:
            recommendations.append("1. –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å –ø–∞–¥–µ–Ω–∏–µ–º:")
            for q in declining_queries[:3]:
                recommendations.append(
                    f"   ‚Ä¢ {q['query']} - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"
                )
                
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        problematic_categories = []
        for cat_name, cat_data in data['categories'].items():
            clicks_change = ((cat_data['current_clicks'] - cat_data['previous_clicks']) / 
                           cat_data['previous_clicks'] * 100 if cat_data['previous_clicks'] else 0)
            if clicks_change < -15:
                problematic_categories.append((cat_name, clicks_change))
                
        if problematic_categories:
            recommendations.append("\n2. –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for cat_name, change in problematic_categories:
                recommendations.append(
                    f"   ‚Ä¢ {cat_name} (–ø–∞–¥–µ–Ω–∏–µ {change:.1f}%) - "
                    "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Å–∞–¥–æ—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                )
                
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if len(recommendations) > 1:  # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            recommendations.append(
                "\n3. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
                "\n   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"
                "\n   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å –ø–∞–¥–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π"
                "\n   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º"
            )
        else:
            recommendations.extend([
                "1. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "2. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö",
                "3. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ç–æ–ø–µ"
            ])
            
        return recommendations
        
    def send_weekly_report(self) -> bool:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            data = self.get_comparison_data()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            report_text, images = self.format_comparison_report(data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            self.telegram.send_message(report_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            for image in images:
                self.telegram.send_photo(image)
                
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            return False
