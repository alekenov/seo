"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤.
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional

from src.utils.credentials_manager import CredentialsManager
from src.database.supabase_client import SupabaseClient
from src.services.gsc_service import GSCService
from src.services.telegram_service import TelegramService
from src.reports.constants import TOP_LIMITS


class WeeklyReport:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ WeeklyReport."""
        self.credentials = CredentialsManager()
        self.db = SupabaseClient()
        self.gsc = GSCService()
        self.telegram = TelegramService()
        
    def get_date_range(self) -> tuple[datetime, datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)."""
        end_date = datetime.now() - timedelta(days=3)  # GSC –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—Ç–∞—é—Ç –Ω–∞ 3 –¥–Ω—è
        start_date = end_date - timedelta(days=7)
        return start_date, end_date
        
    def collect_metrics(self) -> Dict:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        start_date, end_date = self.get_date_range()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GSC
        analytics_data = self.gsc.get_search_analytics(
            start_date=start_date,
            end_date=end_date,
            dimensions=['page', 'query']
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = self.gsc.group_by_category(analytics_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∑–∞–ø—Ä–æ—Å—ã
        top_queries = self.gsc.get_top_queries(
            analytics_data,
            limit=TOP_LIMITS['queries']
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        total_impressions = sum(row['impressions'] for row in analytics_data.get('rows', []))
        total_clicks = sum(row['clicks'] for row in analytics_data.get('rows', []))
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        weighted_position = sum(
            row['position'] * row['impressions']
            for row in analytics_data.get('rows', [])
        )
        avg_position = weighted_position / total_impressions if total_impressions > 0 else 0
        
        return {
            'overall': {
                'total_impressions': total_impressions,
                'total_clicks': total_clicks,
                'avg_position': avg_position,
                'top_queries': [q['query'] for q in top_queries],
                'top_pages': []  # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü
            },
            'categories': categories
        }
        
    def format_report(self, metrics: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Args:
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        start_date, end_date = self.get_date_range()
        
        report = [
            f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ SEO",
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n",
            "üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:",
            f"‚Ä¢ –ü–æ–∫–∞–∑—ã: {metrics['overall']['total_impressions']:,}",
            f"‚Ä¢ –ö–ª–∏–∫–∏: {metrics['overall']['total_clicks']:,}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {metrics['overall']['avg_position']:.1f}\n",
            "üîù –¢–æ–ø –∑–∞–ø—Ä–æ—Å—ã:",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∑–∞–ø—Ä–æ—Å—ã
        for query in metrics['overall']['top_queries'][:5]:
            report.append(f"‚Ä¢ {query}")
            
        report.append("\nüì± –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, data in metrics['categories'].items():
            report.append(f"\n{category}:")
            report.append(f"‚Ä¢ –ü–æ–∫–∞–∑—ã: {data['impressions']:,}")
            report.append(f"‚Ä¢ –ö–ª–∏–∫–∏: {data['clicks']:,}")
            report.append(f"‚Ä¢ CTR: {data['ctr']:.1%}")
            
        return "\n".join(report)
        
    def send_report(self, report_text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram –∫–∞–Ω–∞–ª.
        
        Args:
            report_text: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted_text = (
                f"<b>{report_text}</b>\n\n"
                f"<i>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            return self.telegram.send_message_sync(formatted_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def generate_and_send(self) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            metrics = self.collect_metrics()
            report = self.format_report(metrics)
            return self.send_report(report)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
