"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤.
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional

from src.utils.credentials_manager import CredentialsManager
from src.database.supabase_client import SupabaseClient
from src.services.gsc_service import GSCService
from src.services.telegram_service import TelegramService
from src.reports.constants import TOP_LIMITS


class WeeklyReport:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ WeeklyReport."""
        self.credentials = CredentialsManager()
        self.db = SupabaseClient()
        self.gsc = GSCService()
        self.telegram = TelegramService()
        
    def get_date_range(self) -> tuple[datetime, datetime, datetime, datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏.
        
        Returns:
            tuple: (–Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏, 
                   –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏)
        """
        end_date = datetime.now() - timedelta(days=3)  # GSC –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—Ç–∞—é—Ç –Ω–∞ 3 –¥–Ω—è
        start_date = end_date - timedelta(days=7)
        prev_end_date = start_date - timedelta(days=1)
        prev_start_date = prev_end_date - timedelta(days=7)
        return start_date, end_date, prev_start_date, prev_end_date
        
    def get_comparison_data(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        """
        start_date, end_date, prev_start, prev_end = self.get_date_range()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase
        result = self.db.client.table('search_queries_daily').select('*').execute()
        data = result.data
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        current_week_data = [
            row for row in data 
            if start_date <= datetime.fromisoformat(row['date']) <= end_date
        ]
        
        previous_week_data = [
            row for row in data 
            if prev_start <= datetime.fromisoformat(row['date']) <= prev_end
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        categories = {}
        cities = {}
        queries = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        for row in current_week_data:
            query = row['query']
            query_type = row['query_type']
            city = row['city']
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
            prev_data = next(
                (r for r in previous_week_data 
                 if r['query'] == query 
                 and r['query_type'] == query_type 
                 and r['city'] == city),
                None
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            query_data = {
                'query': query,
                'current_clicks': row['clicks'],
                'previous_clicks': prev_data['clicks'] if prev_data else 0,
                'current_position': row['position'],
                'previous_position': prev_data['position'] if prev_data else 0,
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            query_data['clicks_change'] = (
                ((query_data['current_clicks'] - query_data['previous_clicks']) / 
                 query_data['previous_clicks'] * 100)
                if query_data['previous_clicks'] > 0 else 
                (100 if query_data['current_clicks'] > 0 else 0)
            )
            
            query_data['position_change'] = (
                query_data['previous_position'] - query_data['current_position']
            )
            
            queries.append(query_data)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if query_type not in categories:
                categories[query_type] = {
                    'current_clicks': 0,
                    'previous_clicks': 0,
                    'current_impressions': 0,
                    'previous_impressions': 0
                }
            cat = categories[query_type]
            cat['current_clicks'] += row['clicks']
            cat['current_impressions'] += row['impressions']
            if prev_data:
                cat['previous_clicks'] += prev_data['clicks']
                cat['previous_impressions'] += prev_data['impressions']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
            if city and city not in cities:
                cities[city] = {
                    'current_clicks': 0,
                    'previous_clicks': 0,
                    'current_impressions': 0,
                    'previous_impressions': 0
                }
            if city:
                city_data = cities[city]
                city_data['current_clicks'] += row['clicks']
                city_data['current_impressions'] += row['impressions']
                if prev_data:
                    city_data['previous_clicks'] += prev_data['clicks']
                    city_data['previous_impressions'] += prev_data['impressions']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–ª–∏–∫–æ–≤
        queries.sort(key=lambda x: abs(x['clicks_change']), reverse=True)
        
        return {
            'queries': queries[:TOP_LIMITS['queries']],
            'categories': categories,
            'cities': cities
        }
        
    def format_comparison_report(self, data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        start_date, end_date, prev_start, prev_end = self.get_date_range()
        
        report = [
            f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ SEO",
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n",
            "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π:\n"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        report.append("üìà –†–ê–°–¢–£–©–ò–ï –ó–ê–ü–†–û–°–´:")
        growing_queries = sorted(
            [q for q in data['queries'] if q['clicks_change'] > 0],
            key=lambda x: x['clicks_change'],
            reverse=True
        )[:5]
        
        for q in growing_queries:
            report.extend([
                f"‚Ä¢ {q['query']}",
                f"  –ö–ª–∏–∫–∏: {q['current_clicks']} (+{q['clicks_change']:.1f}%)",
                f"  –ü–æ–∑–∏—Ü–∏—è: {q['current_position']:.1f} ({'+' if q['position_change'] > 0 else ''}{q['position_change']:.1f})"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        report.append("\nüìâ –ü–ê–î–ê–Æ–©–ò–ï –ó–ê–ü–†–û–°–´:")
        declining_queries = sorted(
            [q for q in data['queries'] if q['clicks_change'] < 0],
            key=lambda x: x['clicks_change']
        )[:5]
        
        for q in declining_queries:
            report.extend([
                f"‚Ä¢ {q['query']}",
                f"  –ö–ª–∏–∫–∏: {q['current_clicks']} ({q['clicks_change']:.1f}%)",
                f"  –ü–æ–∑–∏—Ü–∏—è: {q['current_position']:.1f} ({'+' if q['position_change'] > 0 else ''}{q['position_change']:.1f})"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        report.append("\nüìä –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for cat_name, cat_data in data['categories'].items():
            clicks_change = ((cat_data['current_clicks'] - cat_data['previous_clicks']) / 
                           cat_data['previous_clicks'] * 100 if cat_data['previous_clicks'] else 0)
            report.extend([
                f"‚Ä¢ {cat_name}:",
                f"  –ö–ª–∏–∫–∏: {cat_data['current_clicks']} ({'+' if clicks_change > 0 else ''}{clicks_change:.1f}%)"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º
        report.append("\nüåÜ –ü–û –ì–û–†–û–î–ê–ú:")
        for city_name, city_data in data['cities'].items():
            clicks_change = ((city_data['current_clicks'] - city_data['previous_clicks']) / 
                           city_data['previous_clicks'] * 100 if city_data['previous_clicks'] else 0)
            report.extend([
                f"‚Ä¢ {city_name}:",
                f"  –ö–ª–∏–∫–∏: {city_data['current_clicks']} ({'+' if clicks_change > 0 else ''}{clicks_change:.1f}%)"
            ])
        
        return "\n".join(report)
    
    def send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparison_data = self.get_comparison_data()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = self.format_comparison_report(comparison_data)
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            creds = self.credentials.load_credentials('telegram')
            chat_id = creds['channel_id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            self.telegram.send_message(
                chat_id=chat_id,
                text=report_text,
                parse_mode='HTML'
            )
            
            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            print(error_msg)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                creds = self.credentials.load_credentials('telegram')
                chat_id = creds['channel_id']
                self.telegram.send_message(
                    chat_id=chat_id,
                    text=error_msg
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            return False
