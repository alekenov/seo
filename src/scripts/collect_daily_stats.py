"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
import os
import sys
import re
from datetime import datetime, timedelta
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.append(project_root)

from src.config.supabase_config import DATABASE_URL
from src.services.gsc_service import GSCService
from src.services.telegram_service import TelegramService
from src.utils.credentials_manager import CredentialsManager
from src.utils.logger import setup_logger

logger = setup_logger(__name__)

def get_city_from_page(page: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –¥–æ–º–µ–Ω
    page = page.replace('https://cvety.kz/', '').replace('https://blog.cvety.kz/', 'blog/')
    
    # –ú–∞–ø–ø–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
    city_mapping = {
        'almaty': '–∞–ª–º–∞—Ç—ã',
        'astana': '–∞—Å—Ç–∞–Ω–∞',
        'shymkent': '—à—ã–º–∫–µ–Ω—Ç'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–≥
    if page.startswith('blog/'):
        return '–±–ª–æ–≥'
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞
    for eng, rus in city_mapping.items():
        if page.startswith(f"{eng}/"):
            return rus
            
    return '–æ–±—â–∏–π'

def get_query_type(query: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞."""
    query = query.lower()
    
    # –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if any(brand in query for brand in ['cvety.kz', '—Ü–≤–µ—Ç—ã.–∫–∑', '—Ü–≤–µ—Ç—ã –∫–∑']):
        return '–±—Ä–µ–Ω–¥–æ–≤—ã–π'
        
    # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if any(word in query for word in ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç']):
        return '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π'
        
    # –ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ
    if '–¥–æ—Å—Ç–∞–≤–∫–∞' in query:
        return '–¥–æ—Å—Ç–∞–≤–∫–∞'
        
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if any(word in query for word in ['–∫–∞–∫', '—á—Ç–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É']):
        return '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'
        
    # –ó–∞–ø—Ä–æ—Å—ã –ø–æ —Ç–∏–ø–∞–º —Ü–≤–µ—Ç–æ–≤
    if any(flower in query for flower in ['—Ä–æ–∑—ã', '—Ç—é–ª—å–ø–∞–Ω—ã', '–ø–∏–æ–Ω—ã', '—Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã']):
        return '—Ç–∏–ø—ã_—Ü–≤–µ—Ç–æ–≤'
        
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ—á–∏–µ
    return '–ø—Ä–æ—á–µ–µ'

def filter_and_sort_rows(rows: List[Dict]) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏."""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–∫–∞–º
    rows.sort(key=lambda x: x['clicks'], reverse=True)
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50
    return rows[:50]

def save_daily_stats(stats, date):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î."""
    import psycopg2
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    
    total_clicks = 0
    total_impressions = 0
    total_queries = 0
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    city_stats = {}
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
    query_type_stats = {}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    rows = filter_and_sort_rows(stats.get('rows', []))
    
    for row in rows:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        dimensions = row['keys']
        page, query = dimensions[0], dimensions[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        city = get_city_from_page(page)
        query_type = get_query_type(query)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        clicks = row['clicks']
        impressions = row['impressions']
        position = row['position']
        ctr = (clicks / impressions * 100) if impressions > 0 else 0
        
        # –°—É–º–º–∏—Ä—É–µ–º –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        total_clicks += clicks
        total_impressions += impressions
        total_queries += 1
        
        # –°—É–º–º–∏—Ä—É–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        if city not in city_stats:
            city_stats[city] = {
                'clicks': 0,
                'impressions': 0,
                'queries': 0
            }
        city_stats[city]['clicks'] += clicks
        city_stats[city]['impressions'] += impressions
        city_stats[city]['queries'] += 1
        
        # –°—É–º–º–∏—Ä—É–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        if query_type not in query_type_stats:
            query_type_stats[query_type] = {
                'clicks': 0,
                'impressions': 0,
                'queries': 0
            }
        query_type_stats[query_type]['clicks'] += clicks
        query_type_stats[query_type]['impressions'] += impressions
        query_type_stats[query_type]['queries'] += 1
        
        try:
            cur.execute("""
                INSERT INTO search_queries_daily 
                    (date, query, query_type, clicks, impressions, position, ctr, city)
                VALUES 
                    (%s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (date, query, city) DO UPDATE SET
                    query_type = EXCLUDED.query_type,
                    clicks = EXCLUDED.clicks,
                    impressions = EXCLUDED.impressions,
                    position = EXCLUDED.position,
                    ctr = EXCLUDED.ctr
            """, (
                date,
                query,
                query_type,
                clicks,
                impressions,
                position,
                ctr,
                city
            ))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {query}: {e}")
    
    conn.commit()
    cur.close()
    conn.close()
    
    return total_clicks, total_impressions, total_queries, city_stats, query_type_stats

def main():
    """Main function."""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        gsc = GSCService()
        telegram = TelegramService()
        creds = CredentialsManager()
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –±–∞–∑—ã
        chat_id = creds.get_credential('telegram', 'channel_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞ (GSC –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        target_date = datetime.now().date() - timedelta(days=2)
        logger.info(f"–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {target_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = gsc.get_search_analytics(
            start_date=target_date,
            end_date=target_date,
            dimensions=['page', 'query', 'date']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É
        if response and 'rows' in response:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            total_clicks, total_impressions, total_queries, city_stats, query_type_stats = save_daily_stats(response, target_date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìä –¢–û–ü-50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {target_date.strftime('%Y-%m-%d')}\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += (
                f"üåê –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
                f"üëÜ –ö–ª–∏–∫–∏: {total_clicks}\n"
                f"üëÄ –ü–æ–∫–∞–∑—ã: {total_impressions:,}\n"
                f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {total_queries}\n"
                f"CTR: {(total_clicks / total_impressions * 100):.2f}%\n\n"
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
            message += "üìù –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:\n"
            for query_type, stats in query_type_stats.items():
                query_ctr = (stats['clicks'] / stats['impressions'] * 100) if stats['impressions'] > 0 else 0
                message += (
                    f"\n{query_type.upper()}:\n"
                    f"üëÜ –ö–ª–∏–∫–∏: {stats['clicks']}\n"
                    f"üëÄ –ü–æ–∫–∞–∑—ã: {stats['impressions']:,}\n"
                    f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['queries']}\n"
                    f"CTR: {query_ctr:.2f}%\n"
                )
            
            message += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
            message += "üèô –ü–û –ì–û–†–û–î–ê–ú:\n"
            for city, stats in city_stats.items():
                city_ctr = (stats['clicks'] / stats['impressions'] * 100) if stats['impressions'] > 0 else 0
                message += (
                    f"\n{city.upper()}:\n"
                    f"üëÜ –ö–ª–∏–∫–∏: {stats['clicks']}\n"
                    f"üëÄ –ü–æ–∫–∞–∑—ã: {stats['impressions']:,}\n"
                    f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['queries']}\n"
                    f"CTR: {city_ctr:.2f}%\n"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            telegram.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {target_date.strftime('%Y-%m-%d')} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            
        else:
            error_msg = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç GSC API"
            logger.error(error_msg)
            telegram.send_message(chat_id=chat_id, text=error_msg)
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            telegram.send_message(chat_id=chat_id, text=error_msg)
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram")

if __name__ == "__main__":
    main()
