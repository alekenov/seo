"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –≤ Telegram."""

from datetime import datetime, timedelta
from src.analytics.position_analyzer import EnhancedPositionAnalyzer
from src.services.telegram_service import TelegramService
from src.utils.credentials_manager import CredentialsManager
from src.database.postgres_client import PostgresClient
from typing import NamedTuple

class PositionChange(NamedTuple):
    query: str
    page_url: str
    city: str
    old_position: float
    new_position: float
    impressions_change: int
    clicks_change: int
    change: float

def format_position_changes(changes: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
    if not changes:
        return "–ó–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    
    report = "üéØ *–ó–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:*\n\n"
    
    for change in changes:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if change.new_position < change.old_position:
            emoji = "üìà"  # –£–ª—É—á—à–µ–Ω–∏–µ
        else:
            emoji = "üìâ"  # –£—Ö—É–¥—à–µ–Ω–∏–µ
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
        report += (
            f"{emoji} `{change.query}`\n"
            f"    –ü–æ–∑–∏—Ü–∏—è: {change.old_position:.1f} ‚Üí {change.new_position:.1f} "
            f"({abs(change.change):.1f})\n"
            f"    –ü–æ–∫–∞–∑—ã: {change.impressions_change:+d}\n"
            f"    –ö–ª–∏–∫–∏: {change.clicks_change:+d}\n"
            f"    –ì–æ—Ä–æ–¥: {change.city}\n"
            f"    URL: {change.page_url}\n\n"
        )
    
    return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    db_client = PostgresClient()
    analyzer = EnhancedPositionAnalyzer(db_client)
    telegram = TelegramService()
    creds = CredentialsManager()
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ Supabase
    telegram_creds = creds.load_credentials('telegram')
    channel_id = telegram_creds['channel_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º channel_id –≤–º–µ—Å—Ç–æ chat_id
    print(f"Channel ID: {channel_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    start_date = datetime(2023, 12, 11).date()
    end_date = datetime(2024, 12, 6).date()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    changes, stats = analyzer.get_position_changes(start_date, end_date)
    print(f"\n–ò–∑–º–µ–Ω–µ–Ω–∏—è: {changes}")
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    if not changes:
        message = (
            f"üîç *–û—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–π*\n"
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
            f"–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        )
        telegram.send_message(channel_id, message, parse_mode='Markdown')
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = (
        f"üîç *–û—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–π*\n"
        f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    report += (
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.total_queries}\n"
        f"–ó–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats.significant_changes}\n"
        f"–£–ª—É—á—à–µ–Ω–∏–π: {stats.improved_count}\n"
        f"–£—Ö—É–¥—à–µ–Ω–∏–π: {stats.declined_count}\n"
        f"–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {stats.avg_position:.2f}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    report += format_position_changes(changes[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    telegram.send_message(channel_id, report, parse_mode='Markdown')


if __name__ == '__main__':
    main()
