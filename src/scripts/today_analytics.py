from src.services.yandex_metrika import YandexMetrikaAPI
import pandas as pd
from datetime import datetime

def get_today_analytics():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    token = 'y0_AgAAAAAIQVdQAAzyygAAAAEcFYUiAACbs5T2SZBAtbCrBXrF7T-3NHSfVw'
    counter_id = 26416359
    
    try:
        metrika = YandexMetrikaAPI(token, counter_id)
        today = 'today'
        
        # 1. –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑–∞–º –∏ –¥–æ—Ö–æ–¥–∞–º
        print("\nüí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:")
        ecommerce_params = {
            'date1': today,
            'date2': today,
            'metrics': 'ym:s:visits,ym:s:ecommercePurchases,ym:s:ecommerceKZTConvertedRevenue',
            'dimensions': 'ym:s:date',
        }
        ecommerce_data = metrika._make_request(ecommerce_params)
        if ecommerce_data['data']:
            visits = ecommerce_data['data'][0]['metrics'][0]
            purchases = ecommerce_data['data'][0]['metrics'][1]
            revenue = ecommerce_data['data'][0]['metrics'][2]
            conversion = (purchases / visits * 100) if visits > 0 else 0
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤: {visits:,.0f}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {purchases:,.0f}")
            print(f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%")
            print(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {revenue:,.0f} —Ç–≥")
            if purchases > 0:
                print(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {revenue/purchases:,.0f} —Ç–≥")
        
        # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º
        print("\nüì¶ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º:")
        orders_params = {
            'date1': today,
            'date2': today,
            'metrics': 'ym:s:ecommerceKZTConvertedRevenue',
            'dimensions': 'ym:s:purchaseID,ym:s:lastTrafficSource',
            'sort': '-ym:s:ecommerceKZTConvertedRevenue'
        }
        orders_data = metrika._make_request(orders_params)
        
        if orders_data['data']:
            orders_df = pd.DataFrame([
                {
                    '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': item['dimensions'][0]['name'],
                    '–ò—Å—Ç–æ—á–Ω–∏–∫': item['dimensions'][1]['name'],
                    '–°—É–º–º–∞': f"{item['metrics'][0]:,.0f} —Ç–≥",
                }
                for item in orders_data['data']
            ])
            print("\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:")
            print(orders_df.to_string(index=False))
        else:
            print("–ó–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:")
        channel_params = {
            'date1': today,
            'date2': today,
            'metrics': 'ym:s:visits,ym:s:ecommercePurchases,ym:s:ecommerceKZTConvertedRevenue',
            'dimensions': 'ym:s:trafficSource',
            'sort': '-ym:s:ecommerceKZTConvertedRevenue'
        }
        channels_data = metrika._make_request(channel_params)
        
        channels_df = pd.DataFrame([
            {
                '–ö–∞–Ω–∞–ª': item['dimensions'][0]['name'],
                '–í–∏–∑–∏—Ç—ã': item['metrics'][0],
                '–ó–∞–∫–∞–∑—ã': item['metrics'][1],
                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è': f"{(item['metrics'][1]/item['metrics'][0]*100):.2f}%" if item['metrics'][0] > 0 else "0%",
                '–î–æ—Ö–æ–¥': f"{item['metrics'][2]:,.0f} —Ç–≥",
            }
            for item in channels_data['data']
        ])
        
        print("\n–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:")
        print(channels_df.to_string(index=False))
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç...")
        today_str = datetime.now().strftime('%Y-%m-%d')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        import os
        os.makedirs('reports', exist_ok=True)
        
        with pd.ExcelWriter(f'reports/ecommerce_report_{today_str}.xlsx') as writer:
            if 'orders_df' in locals():
                orders_df.to_excel(writer, sheet_name='–ó–∞–∫–∞–∑—ã', index=False)
            channels_df.to_excel(writer, sheet_name='–ö–∞–Ω–∞–ª—ã', index=False)
            
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ecommerce_report_{today_str}.xlsx")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    get_today_analytics()
