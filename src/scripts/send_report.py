"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram."""
import os
import sys
from datetime import datetime
import psycopg2

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.append(project_root)

from src.config.supabase_config import DATABASE_URL
from src.services.telegram_service import TelegramService
from src.utils.credentials_manager import CredentialsManager
from src.utils.logger import setup_logger

logger = setup_logger(__name__)

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏."""
    return f"{num:,}".replace(',', ' ')

def get_report_data(date):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    
    data = {
        'query_types': [],
        'cities': [],
        'top_queries': []
    }
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        cur.execute("""
            SELECT query_type, COUNT(*) as count, SUM(clicks) as clicks, SUM(impressions) as impressions
            FROM search_queries_daily
            WHERE date = %s
            GROUP BY query_type
            ORDER BY clicks DESC
        """, (date,))
        data['query_types'] = cur.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        cur.execute("""
            SELECT city, COUNT(*) as count, SUM(clicks) as clicks, SUM(impressions) as impressions
            FROM search_queries_daily
            WHERE date = %s
            GROUP BY city
            ORDER BY clicks DESC
        """, (date,))
        data['cities'] = cur.fetchall()
        
        # –¢–æ–ø-10 –∑–∞–ø—Ä–æ—Å–æ–≤
        cur.execute("""
            SELECT query, query_type, city, clicks, impressions, position
            FROM search_queries_daily
            WHERE date = %s
            ORDER BY clicks DESC
            LIMIT 10
        """, (date,))
        data['top_queries'] = cur.fetchall()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        cur.close()
        conn.close()
        
    return data

def format_report(date, data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç."""
    message = f"üìä –û—Ç—á–µ—Ç –ø–æ SEO –∑–∞ {date.strftime('%d.%m.%Y')}\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_clicks = sum(row[2] for row in data['query_types'])
    total_impressions = sum(row[3] for row in data['query_types'])
    total_queries = sum(row[1] for row in data['query_types'])
    ctr = (total_clicks / total_impressions * 100) if total_impressions > 0 else 0
    
    message += (
        f"üåê –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        f"üëÜ –ö–ª–∏–∫–∏: {format_number(total_clicks)}\n"
        f"üëÄ –ü–æ–∫–∞–∑—ã: {format_number(total_impressions)}\n"
        f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {format_number(total_queries)}\n"
        f"CTR: {ctr:.2f}%\n\n"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
    message += "üìù –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:\n"
    for row in data['query_types']:
        query_type, count, clicks, impressions = row
        query_ctr = (clicks / impressions * 100) if impressions > 0 else 0
        message += (
            f"\n{query_type.upper()}:\n"
            f"üëÜ –ö–ª–∏–∫–∏: {format_number(clicks)}\n"
            f"üëÄ –ü–æ–∫–∞–∑—ã: {format_number(impressions)}\n"
            f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {format_number(count)}\n"
            f"CTR: {query_ctr:.2f}%\n"
        )
    
    message += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    message += "üèô –ü–û –ì–û–†–û–î–ê–ú:\n"
    for row in data['cities']:
        city, count, clicks, impressions = row
        city_ctr = (clicks / impressions * 100) if impressions > 0 else 0
        message += (
            f"\n{city.upper()}:\n"
            f"üëÜ –ö–ª–∏–∫–∏: {format_number(clicks)}\n"
            f"üëÄ –ü–æ–∫–∞–∑—ã: {format_number(impressions)}\n"
            f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {format_number(count)}\n"
            f"CTR: {city_ctr:.2f}%\n"
        )
    
    message += "\n"
    
    # –¢–æ–ø-10 –∑–∞–ø—Ä–æ—Å–æ–≤
    message += "üîù –¢–û–ü-10 –ó–ê–ü–†–û–°–û–í:\n"
    for i, row in enumerate(data['top_queries'], 1):
        query, query_type, city, clicks, impressions, position = row
        query_ctr = (clicks / impressions * 100) if impressions > 0 else 0
        message += (
            f"\n{i}. {query}\n"
            f"üëÜ –ö–ª–∏–∫–∏: {clicks}\n"
            f"üëÄ –ü–æ–∫–∞–∑—ã: {impressions}\n"
            f"CTR: {query_ctr:.2f}%\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {position:.1f}\n"
            f"–¢–∏–ø: {query_type}\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
        )
    
    return message

def main():
    """Main function."""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        telegram = TelegramService()
        creds = CredentialsManager()
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –±–∞–∑—ã
        chat_id = creds.get_credential('telegram', 'channel_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 11 –¥–µ–∫–∞–±—Ä—è 2023
        target_date = datetime(2023, 12, 11).date()
        logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ {target_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = get_report_data(target_date)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        message = format_report(target_date, data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        telegram.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='HTML'
        )
        
        logger.info(f"–û—Ç—á–µ—Ç –∑–∞ {target_date} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            telegram.send_message(chat_id=chat_id, text=error_msg)
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram")

if __name__ == "__main__":
    main()
