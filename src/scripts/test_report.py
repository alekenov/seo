"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞."""

import psycopg2
from datetime import datetime, timedelta
from src.config.supabase_config import DATABASE_URL
from src.services.telegram_service import TelegramService
from src.utils.credentials_manager import CredentialsManager

def get_db_connection():
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(DATABASE_URL)

def format_metrics(metrics):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    report = "üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ SEO*\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report += "*–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
    for metric in metrics['general']:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–µ–Ω–¥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if metric['query_type'] == '–±—Ä–µ–Ω–¥–æ–≤—ã–π':
            continue
            
        report += f"*{metric['query_type']}*\n"
        report += f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metric['total_queries']}\n"
        report += f"üëÜ –ö–ª–∏–∫–∏: {metric['clicks']}\n"
        report += f"üëÄ –ü–æ–∫–∞–∑—ã: {metric['impressions']}\n"
        report += f"üìç –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {metric['avg_position']:.1f}\n"
        report += f"üìä –°—Ä–µ–¥–Ω–∏–π CTR: {metric['avg_ctr']:.2f}%\n\n"
    
    # –¢–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤
    report += "*–¢–æ–ø 10 –Ω–µ–±—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
    query_count = 0
    for query in metrics['top_queries']:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–µ–Ω–¥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (cvety kz, —Ü–≤–µ—Ç—ã –∫–∑ –∏ —Ç.–¥.)
        query_lower = query['query'].lower()
        if 'cvety' in query_lower or '—Ü–≤–µ—Ç—ã –∫–∑' in query_lower:
            continue
            
        query_count += 1
        report += f"{query_count}. *{query['query']}*\n"
        report += f"üëÜ –ö–ª–∏–∫–∏: {query['clicks']}\n"
        report += f"üëÄ –ü–æ–∫–∞–∑—ã: {query['impressions']}\n"
        report += f"üìç –ü–æ–∑–∏—Ü–∏—è: {query['position']:.1f}\n"
        report += f"üìä CTR: {query['ctr']:.2f}%\n\n"
        
        if query_count >= 10:
            break
    
    return report

def get_metrics():
    """–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
    cur.execute("""
        SELECT 
            query_type,
            COUNT(*) as total_queries,
            SUM(clicks) as clicks,
            SUM(impressions) as impressions,
            AVG(position) as avg_position,
            (SUM(clicks)::float / SUM(impressions) * 100) as avg_ctr
        FROM search_queries
        GROUP BY query_type
    """)
    general_metrics = []
    for row in cur.fetchall():
        general_metrics.append({
            'query_type': row[0],
            'total_queries': row[1],
            'clicks': row[2],
            'impressions': row[3],
            'avg_position': row[4],
            'avg_ctr': row[5]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –±—Ä–µ–Ω–¥–æ–≤—ã–µ)
    cur.execute("""
        SELECT 
            query,
            SUM(clicks) as clicks,
            SUM(impressions) as impressions,
            AVG(position) as position,
            (SUM(clicks)::float / SUM(impressions) * 100) as ctr
        FROM search_queries
        WHERE query_type != '–±—Ä–µ–Ω–¥–æ–≤—ã–π'
        GROUP BY query
        ORDER BY SUM(clicks) DESC
        LIMIT 20
    """)
    top_queries = []
    for row in cur.fetchall():
        top_queries.append({
            'query': row[0],
            'clicks': row[1],
            'impressions': row[2],
            'position': row[3],
            'ctr': row[4]
        })
    
    cur.close()
    conn.close()
    
    return {
        'general': general_metrics,
        'top_queries': top_queries
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = get_metrics()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = format_metrics(metrics)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        creds = CredentialsManager().load_credentials('telegram')
        telegram = TelegramService(creds['bot_token'])
        telegram.send_message(creds['channel_id'], report_text, parse_mode='Markdown')
        print("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
